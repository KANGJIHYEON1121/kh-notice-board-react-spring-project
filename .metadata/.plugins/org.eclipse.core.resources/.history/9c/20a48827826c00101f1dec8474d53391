package com.kh.notice_board.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.kh.notice_board.dto.PageRequestDTO;
import com.kh.notice_board.dto.PageResponseDTO;
import com.kh.notice_board.dto.PostDTO;
import com.kh.notice_board.service.PostService;
import com.kh.notice_board.util.CustomFileUtil;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@RestController
@RequestMapping("api/post")
@RequiredArgsConstructor
@Log4j2
public class PostController {
	private final PostService service;
	private final CustomFileUtil fileUtil;

	@GetMapping("/{pno}")
	public PostDTO get(@PathVariable(name = "pno") Long pno) {
		return service.get(pno);
	}

	@GetMapping("/list")
	public PageResponseDTO<PostDTO> list(PageRequestDTO pageRequestDTO) {
		log.info(pageRequestDTO);
		return service.list(pageRequestDTO);
	}

	// POST 요청도 지원하는 경우 (잘 쓰진 않음, 보통 GET으로 처리)
	@PostMapping("/list")
	public PageResponseDTO<PostDTO> listPost(@RequestBody PageRequestDTO pageRequestDTO) {
		log.info(pageRequestDTO);
		return service.list(pageRequestDTO);
	}

	@PostMapping(value = "/", consumes = { "multipart/form-data" })
	public Map<String, Long> register(@ModelAttribute PostDTO postDTO) {
		// 이제 postDTO.getUploadPostImage()는 MultipartFile 리스트야!
		List<MultipartFile> files = postDTO.getPostImage();
		List<String> uploadFileNames = fileUtil.saveFiles(files);
		postDTO.setUploadPostImage(uploadFileNames); // 혹은 별도의 fileName 저장 필드가 있으면 그쪽에 저장!
		Long pno = service.register(postDTO);
		return Map.of("result", pno);
	}

	@PutMapping("/{pno}")
	public Map<String, String> modify(@PathVariable(name = "pno") Long pno, @ModelAttribute PostDTO postDTO) {
		postDTO.setPno(pno);

		// 1. 기존 파일명 리스트
		PostDTO oldPostDTO = service.get(pno);
		List<String> oldFileNames = oldPostDTO.getUploadPostImage();

		// 2. 새로 업로드된 파일
		List<MultipartFile> files = postDTO.getPostImage();
		List<String> currentUploadFileNames = fileUtil.saveFiles(files);

		// 3. 유지할 기존 파일명 (프론트에서 전달된)
		List<String> uploadedFileNames = postDTO.getUploadPostImage();
		List<String> fileNamesToSave = (uploadedFileNames == null) ? new ArrayList<>()
				: new ArrayList<>(uploadedFileNames);

		// 4. 신규 업로드 파일 병합
		if (currentUploadFileNames != null && !currentUploadFileNames.isEmpty()) {
			fileNamesToSave.addAll(currentUploadFileNames);
		}

		// ✅ 5. 최종 리스트 세팅 (❗ 여기가 핵심)
		postDTO.setUploadPostImage(fileNamesToSave);

		// 6. DB 반영
		service.modify(postDTO);

		// 7. 삭제 대상 파일 선별 및 삭제
		if (oldFileNames != null && !oldFileNames.isEmpty()) {
			List<String> removeFiles = oldFileNames.stream().filter(fileName -> !fileNamesToSave.contains(fileName))
					.collect(Collectors.toList());
			fileUtil.deleteFiles(removeFiles);
		}

		return Map.of("RESULT", "SUCCESS");
	}

	@DeleteMapping("/{pno}")
	public Map<String, String> remove(@PathVariable("pno") Long pno) {
		// 삭제해야 할 파일들 알아내기
		List<String> oldFileNames = service.get(pno).getUploadPostImage();
		service.remove(pno);
		fileUtil.deleteFiles(oldFileNames);
		return Map.of("RESULT", "SUCCESS");
	}

	@GetMapping("/mylist/{writer}")
	public PageResponseDTO<PostDTO> getMyPosts(@PathVariable("writer") String writer, PageRequestDTO pageRequestDTO) {
		return service.getMyPosts(pageRequestDTO, writer);
	}


	@GetMapping("/all")
	public List<PostDTO> getAllPosts() {
		return service.getAllPosts();
	}

	@GetMapping("/view/{fileName}")
	public ResponseEntity<Resource> viewFileGET(@PathVariable String fileName) {
		return fileUtil.getFile(fileName);
	}

}
