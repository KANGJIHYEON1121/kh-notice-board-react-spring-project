package com.kh.notice_board.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.kh.notice_board.domain.Post;
import com.kh.notice_board.dto.PageRequestDTO;
import com.kh.notice_board.dto.PageResponseDTO;
import com.kh.notice_board.dto.PostDTO;
import com.kh.notice_board.repository.PostRepository;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@Service
@Transactional
@Log4j2
@RequiredArgsConstructor
public class PostServiceImpl implements PostService {
	// 자동주입 대상은 final 선언
	private final ModelMapper modelMapper;
	private final PostRepository postRepository;

	@Override
	public Long register(PostDTO postDTO) {
		log.info(". ........................");
		Post post = modelMapper.map(postDTO, Post.class);
		Post savedPost = postRepository.save(post);
		return savedPost.getPno();
	}

	@Override
	public PostDTO get(Long pno) {
		java.util.Optional<Post> result = postRepository.findById(pno);
		Post post = result.orElseThrow();
		PostDTO dto = modelMapper.map(post, PostDTO.class);
		return dto;
	}

	@Override
	public void modify(PostDTO postDTO) {
		Optional<Post> result = postRepository.findById(postDTO.getPno());
		Post post = result.orElseThrow();
		
		post.changeContent(postDTO.getContent());
		post.changeDueDate(postDTO.getDueDate());
		
		
		postRepository.save(post);
	}

	@Override
	public void remove(Long pno) {
		postRepository.deleteById(pno);
	}

	@Override
	public PageResponseDTO<PostDTO> list(PageRequestDTO pageRequestDTO) {
		Pageable pageable = PageRequest.of(
				pageRequestDTO.getPage() - 1, // 1 페이지가 0 이므로 주의
				pageRequestDTO.getSize(), Sort.by("pno").descending());
				
				Page<Post> result = postRepository.findAll(pageable);
				
				List<PostDTO> ptoList = result.getContent().stream().map(post ->
				modelMapper.map(post, PostDTO.class)).collect(Collectors.toList());
				
				long totalCount = result.getTotalElements();
				
				PageResponseDTO<PostDTO> responseDTO = PageResponseDTO.<PostDTO>withAll()
				.ptoList(ptoList).pageRequestDTO(pageRequestDTO).totalCount(totalCount).build();
				
				return responseDTO;
				}
	}

}
