package com.kh.notice_board.controller;

import java.util.List;
import java.util.Map;

import org.springframework.core.io.Resource;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.kh.notice_board.dto.PageRequestDTO;
import com.kh.notice_board.dto.PageResponseDTO;
import com.kh.notice_board.dto.PostDTO;
import com.kh.notice_board.service.PostService;
import com.kh.notice_board.util.CustomFileUtil;

import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;

@RestController
@RequestMapping("api/post")
@RequiredArgsConstructor
@Log4j2
public class PostController {
	private final PostService service;
	private final CustomFileUtil fileUtil;

	@GetMapping("/{pno}")
	public PostDTO get(@PathVariable(name = "pno") Long pno) {
		return service.get(pno);
	}

	@GetMapping("/list")
	public PageResponseDTO<PostDTO> list(PageRequestDTO pageRequestDTO) {
		log.info(pageRequestDTO);
		return service.list(pageRequestDTO);
	}

	@PostMapping("/")
	public Map<String, Long> register(PostDTO postDTO) {
		log.info("rgister: " + postDTO);
		List<MultipartFile> files = productDTO.getFiles();
		List<String> uploadFileNames = fileUtil.saveFiles(files);
		postDTO.setUploadPostImage(uploadFileNames);
		log.info(uploadFileNames);
		// 서비스 호출
		Long pno = service.register(postDTO);
		return Map.of("result", pno);
	}

	@PutMapping("/{pno}")
	public Map<String, String> modify(@PathVariable(name = "pno") Long pno, @RequestBody PostDTO postDTO) {
		postDTO.setPno(pno);
		log.info("Modify: " + postDTO);
		service.modify(postDTO);
		return Map.of("RESULT", "SUCCESS");
	}

	@DeleteMapping("/{pno}")
	public Map<String, String> remove(@PathVariable(name = "pno") Long pno) {
		log.info("Remove: " + pno);
		service.remove(pno);
		return Map.of("RESULT", "SUCCESS");
	}

	@GetMapping("/mylist/{writer}")
	public PageResponseDTO<PostDTO> getMyPosts(@PathVariable("writer") String writer, PageRequestDTO pageRequestDTO) {
		return service.getMyPosts(pageRequestDTO, writer);
	}

	@GetMapping("/all")
	public List<PostDTO> getAllPosts() {
		return service.getAllPosts();
	}

	@GetMapping("/view/{fileName}")
	public ResponseEntity<Resource> viewFileGET(@PathVariable String fileName) {
		return fileUtil.getFile(fileName);
	}

}
